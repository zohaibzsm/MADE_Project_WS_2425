
pipeline MBTKPipeline {

    // Mobilithek --> MBTK

    Extractor->ZipArchiveInterpreter->FilePicker->TextFileInterpreter
    ->CSVInterpreter->NameHeaders->NameLastHeader->TableInterpreter
    ->CelsiusToFahrenheitTransformer->BatterytempCelsiusToFahrenheitTransformer
    ->SQLiteLoader;

    // **************************** Pipeline Blocks ********************************

    block Extractor oftype HttpExtractor { 
            url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }
    
    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }
    
    block FilePicker oftype FilePicker {
        path: "./data.csv";
    }

    block TextFileInterpreter oftype TextFileInterpreter{   }
    
    block CSVInterpreter  oftype CSVInterpreter  {
        delimiter : ';';
    }

    block NameHeaders oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer","model", "month", "temperature"];
    }

    block NameLastHeader oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    block TableInterpreter oftype TableInterpreter { 
        header: true;
        columns: [
            "id" oftype valid_id,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype valid_month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }
    // valid_month Constraint
    valuetype valid_month oftype decimal {
        constraints: [ valid_month_Const ];
    }
    constraint valid_month_Const on decimal :
        value > 0 and value <= 12;

    // valid_id Constraint
    valuetype valid_id oftype integer {
        constraints: [ valid_id_Const ];
    }
    constraint valid_id_Const on integer :
        value > 0;
    
    // temp Celsius to Fahrenheit converter
    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    // battery temp Celsius to Fahrenheit converter
    block BatterytempCelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: BatterytempCelsiusToFahrenheit;
    }
    transform BatterytempCelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block SQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
    
}